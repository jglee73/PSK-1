#pragma once

#include "Interface_Code.h"
#include "CCommon_System.h"


class CObj__DB_CFG : public __IOBJ__STD_TYPE
{
private:
	//-------------------------------------------------------------------------
	CString sObject_Name;

	CX_FA_300mm_LINK xFA_300mm_Link;
	SCX__CTC__SCH_MATERIAL_CTRL xI_SCH_MATERIAL_CTRL;

	//-------------------------------------------------------------------------
	//  INTERNAL PROPERTY

	// SYSTEM
	CX__VAR_STRING_CTRL sCH_SYS__USER_LEVEL;
	CX__VAR_STRING_CTRL sCH_SYS__USER_ID;

	CString sVAR__SYS_MSG;
	CString sVAR__FNC_MSG;

	CString sVAR_SYS__VAC_AREA__MATERIAL_COUNT;
	CString sVAR_SYS__VAC_ROBOT__OUT_MATERIAL_COUNT;
	CString sVAR_SYS__TOTAL_MATERIAL_COUNT_IN_SYSTEM;

	CString sVAR_SYS__SYSTEM_LEAK_CHECK_REQ;

	//
	CX__VAR_STRING_CTRL  sCH_SYS_INFO__TOOL_ID;
	CX__VAR_STRING_CTRL  sCH_SYS_INFO__TMC_ID;
	CX__VAR_STRING_CTRL  sCH_SYS_INFO__PMC_ID[CFG_PM_LIMIT];
	CX__VAR_DIGITAL_CTRL dCH_SYS_INFO__PMC_PROCESS[CFG_PM_LIMIT];

	//
	CString sVAR__TMC_SYS_MSG;
	CString sVAR__TMC_FNC_MSG;

	CString sVAR__PMC_SYS_MSG[CFG_PM_LIMIT];
	CString sVAR__PMC_FNC_MSG[CFG_PM_LIMIT];


	// CFG ...
	CX__VAR_DIGITAL_CTRL dCH__SCH_TEST_CFG_SIM_ALARM_REPORT;
	CX__VAR_DIGITAL_CTRL dCH__SCH_TEST_CFG_TMC_DUMMY_BY_CTC;
	CX__VAR_DIGITAL_CTRL dCH__SCH_TEST_CFG_PMX_DUMMY_BY_CTC[CFG_PM_LIMIT];

	// AL1_AL2_CFG_USE_MODE
	CString sVAR_CFG__AL1_AL2_CFG_USE_MODE;

	// EQUIPMENT ID
	CString sVAR_CFG__EQP_ID;

	// AGVMODE
	CX__VAR_DIGITAL_CTRL xCH_CFG__AGVMODE;

	// COOLER FLOW 
	CString dVAR_CFG__COOLER_FLOW_MODE;

	// TOOL CLEAR
	CString dVAR_CFG__TOOL_CLEAR__PMC_MATERIAL;		// ALL_MATERIAL  NOT_ERROR_WAFER

	// ENABLE / DISABLE 
	CString aVAR_CFG__PMx_USE_CNT;
	CString sVAR_CFG__PMx_NAME[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_USE[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_SYS_USE_FLAG[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_STAGE1_USE[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_STAGE2_USE[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_SLOT_MAX[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_PROC_SLOT_TYPE[CFG_PM_LIMIT];
	CString dVAR_CFG__PMx_PROC_TYPE[CFG_PM_LIMIT];

	// PRESSURE REFERENCE
	CString dVAR_CFG__TRANSFER_MODE;				// ATM  VAC
	CString aVAR_CFG__REF_ATM_PRESSURE;
	CString aVAR_CFG__REF_VAC_PRESSURE;

	// LPx
	CString dVAR_CFG__LPx_GLASS_TYPE[CFG_LP_LIMIT];
	CString dVAR_CFG__LPx_JOB_START_FLAG[CFG_LP_LIMIT];
	CString sVAR__LPx_MAP_REQ[CFG_LP_LIMIT];

	CString dVAR_CFG__LPx_MANUAL_TO_AUTO_ALWAYS_APPLY;
	CString dVAR_CFG__LPx_PIO_READY_CHECK_MODE;
	CString dVAR_CFG__LPx_JOB_MODE_WITH_UNKNOWN_SLOT;
	CString dVAR_CFG__LPx_CID_FORMAT;

	// ALx
	CString dVAR_CFG__AL1_USE_FLAG;
	CString dVAR_CFG__AL1_SLOT01_USE_FLAG;
	CString dVAR_CFG__AL1_SLOT02_USE_FLAG;

	CString dVAR_CFG__AL2_USE_FLAG;
	CString dVAR_CFG__AL2_SLOT01_USE_FLAG;
	CString dVAR_CFG__AL2_SLOT02_USE_FLAG;

	// JOB START & END READY CONTROL ...
	CString dVAR_CFG__JOB_START_READY_PMx_USE;
	CString dVAR_CFG__JOB_END_READY_PMx_USE;

	// SYSTEM IDLE ...
	CString aVAR_CFG__SYSTEM_IDLE_CFG_TIME_SEC;
	CString aVAR__SYSTEM_IDLE_CUR_TIME_SEC;

	CString dVAR_CFG__SYSTEM_IDLE_CFG_PMx_USE[CFG_PM_LIMIT];
	CString aVAR_CFG__SYSTEM_IDLE_CFG_PMx_SEC[CFG_PM_LIMIT];

	// PRE_RCP ...
	CString dVAR_CFG__PRE_RCP_CFG_PMx_USE[CFG_PM_LIMIT];
	CString aVAR_CFG__PRE_RCP_CFG_PMx_WAFER_COUNT[CFG_PM_LIMIT];

	// ...
	CString dVAR_CFG__PRESSURE_CHECK_MODE;

	CString sVAR_CFG__PMC_MSG_WIN_CTRL;
	CString sVAR_CFG__PMC_MSG_WIN_NAME;

	// CYCLE TEST
	CString sVAR_CFG__CYCLE_MODE_FLAG;
	CString sVAR_CFG__CYCLE_FOUP_CTRL_MODE;

	// CTC AUTO_PM ...
	CString dVAR_CFG__CTC_AUTO_PM_USE_FLAG;

	// AUTO_PM TIME  ...
	CString sVAR__AUTO_PM__SCH_SEQUENCE_MODE__REQ_FLAG;

	CString dVAR_CFG__AUTO_PM_TIME_MODE;
	CString sVAR_CFG__PMC_AUTO_PM_FLAG[CFG_PM_LIMIT];

	// IDLE PARA ...
	CString dVAR_CFG__AUTO_PM_IDLE_USE_FLAG;

	CString aVAR_CFG__AUTO_PM_IDLE_REF_TIME;
	CString aVAR_CFG__AUTO_PM_IDLE_CUR_TIME;
	CString aVAR_CFG__AUTO_PM_IDLE_REF_COUNT;
	CString aVAR_CFG__AUTO_PM_IDLE_CUR_COUNT;
	//

	// CTC LEAK_CHECK ...
	CString dVAR_CFG__CTC_LEAK_CHECK_USE_FLAG;

	// LEAK CHECK TIME  ...
	CString sVAR__LEAK_CHECK__SCH_SEQUENCE_MODE__REQ_FLAG;

	CString dVAR_CFG__LEAK_CHECK_TIME_MODE;
	CString sVAR_CFG__PMC_LEAK_CHECK_FLAG[CFG_PM_LIMIT];

	// IDLE PARA ...
	CString dVAR_CFG__LEAK_CHECK_IDLE_USE_FLAG;

	CString aVAR_CFG__LEAK_CHECK_IDLE_REF_TIME;
	CString aVAR_CFG__LEAK_CHECK_IDLE_CUR_TIME;
	CString aVAR_CFG__LEAK_CHECK_IDLE_REF_COUNT;
	CString aVAR_CFG__LEAK_CHECK_IDLE_CUR_COUNT;
	//

	// HANDSHAKE PROTOCOL - USE CONFIG

	// LBx
	CString dVAR_CFG__LBx_PREPMATER_USE;
	CString dVAR_CFG__LBx_COMPMATER_USE;

	// PMx
	CString dVAR_CFG__PMx_PICK_READY_USE;
	CString dVAR_CFG__PMx_PICK_COMPLETE_USE;

	CString dVAR_CFG__PMx_PLACE_READY_USE;
	CString dVAR_CFG__PMx_PLACE_COMPLETE_USE;
	//

	// DUMMY CLEAN RECIPE
	CString aVAR_CFG__DUMMY_CLEAN_USE_FLAG;
	CString aVAR_CFG__DUMMY_CLEAN_SYSTEM_IDLE_TIME;
	CString aVAR__DUMMY_CLEAN_SYSTEM_IDLE_TIME_COUNT;
	CString aVAR_CFG__DUMMY_CLEAN_WAFER_PER_PMC;
	CString sVAR__APP_DUMMY_PORT_CUR_COUNT_SLOTx[CFG_LP__SLOT_MAX];

	// SCHEDULER PARAMETER -----
	CString sVAR__SCH_CONCURRENT_ALWAYS_APPLY;

	CString sVAR__SCH_LBx_MATERIAL_OUT_REQ;
	CString sVAR__SCH_LBx_EMPTY_REQ;
	CString sVAR__SCH_LBx_VERTICAL_PLACE_MODE;

	CString sVAR__SCH_MAP_DEVICE;
	CString sVAR__SCH_ALIGN_DEVICE;
	CString sVAR__SCH_POST_ALIGN_MODE;

	CString sVAR__SCH_WAC_WAFER_POSITION;
	CString sVAR__SCH_WAC_WAFER_APPLY;
	CString aVAR__SCH_WAC_WAFER_DELAY_SEC;
	CString sVAR__SCH_WAC_WAFER_DELAY_COUNT;

	CString sVAR__SCH_LP_JOB_LIST[CFG_LP_LIMIT];

	// ANIMATION INFO -----
	CString sVAR__ANI_PRESSURE_STATUS__ATM;

	// ...
	CX__VAR_STRING_CTRL  sCH__UI_MEMORY_USAGE;

	CX__VAR_DIGITAL_CTRL dCH__CFG_LPx_ACCESS_MODE_AUTO_CTRL_FLAG;
	//

	//.....
	void Mon__INFO_REPORT(CII_OBJECT__ALARM *p_alarm);
	//


public:
	CObj__DB_CFG();
	~CObj__DB_CFG();

	//-------------------------------------------------------------------------
	int __DEFINE__CONTROL_MODE(obj,l_mode);
	int __DEFINE__VERSION_HISTORY(version);

	int __DEFINE__VARIABLE_STD(p_variable);
	int __DEFINE__ALARM(p_alarm);

	//-------------------------------------------------------------------------
	int __INITIALIZE__OBJECT(p_variable,p_ext_obj_create);

	//-------------------------------------------------------------------------
	int __CALL__CONTROL_MODE(mode,p_debug,p_variable,p_alarm);
	int __CALL__MONITORING(id,p_variable,p_alarm);
};
