#pragma once

#include "Interface_Code.h"
#include "CCommon_System.h"

#include "CObj__DB_CFG__ALID.h"


#define CFG_PAGE__SIZE				20


class CObj__DB_CFG : public __IOBJ__STD_TYPE
{
private:
	//-------------------------------------------------------------------------
	CString sObject_Name;

	// ...
	bool bActive__LLx_MULTI_SLOT_VALVE;
	//

	//------------------------------------------------------------------------------
	//  INTERNAL PROPERTY

	CString dVAR__CFG_PAGEx_SAVE[CFG_PAGE__SIZE];

	//
	CX__VAR_STRING_CTRL  sCH__CUR_UTILITY_CATEGORY;
	CX__VAR_STRING_CTRL  sCH__CUR_UTILITY_FNC_NAME;

	//
	CX__VAR_DIGITAL_CTRL dCH__SCH_TEST_CFG_PMC_DUMMY_BY_CTC;

	CX__VAR_DIGITAL_CTRL dCH__CFG_SETUP_TEST_MODE;
	CX__VAR_DIGITAL_CTRL dCH__CFG_SETUP_AUTO_VENTING_PUMPING;
	CX__VAR_DIGITAL_CTRL dCH__CFG_SETUP_LLx_DOOR_SLOT_VLV_CONTROL;

	//
	CString aVAR__CFG_SIM_SLOT_VLV_CLOSE_TIME;
	CString aVAR__CFG_SIM_DOOR_VLV_CLOSE_TIME;
	CString aVAR__CFG_SIM_TMx_VENT_TIME;
	CString aVAR__CFG_SIM_TMx_PUMP_TIME;

	CString aVAR__CFG_SIM_SLOT_VLV_OPEN_TIME;
	CString aVAR__CFG_SIM_DOOR_VLV_OPEN_TIME;
	CString aVAR__CFG_SIM_LLx_SLOW_VENT_TIME;
	CString aVAR__CFG_SIM_LLx_FAST_VENT_TIME;
	CString aVAR__CFG_SIM_LLx_SLOT_PUMP_TIME;
	CString aVAR__CFG_SIM_LLx_FAST_PUMP_TIME;

	//
	CString dVAR__CFG_TRANSFER_MODE;
	CString aVAR__CFG_REF_ATM_PRESSURE;
	CString aVAR__CFG_REF_VAC_PRESSURE;

	CString sVAR__CTC_CUR_MODE;

	//
	CString dVAR__CFG_SYS_PUMP_TYPE;

	// LPx -----
	CString dVAR__CFG_LPx_EXIST_FLAG[CFG_LP_LIMIT];
	CString dVAR__CFG_LPx_TYPE[CFG_LP_LIMIT];

	CString dVAR__CFG_LT_CURTN_USE;
	CString aVAR__CFG_PIO_TP1;
	CString aVAR__CFG_PIO_TP2;
	CString aVAR__CFG_PIO_TP3;
	CString aVAR__CFG_PIO_TP4;
	CString aVAR__CFG_PIO_TP5;
	CString aVAR__CFG_PIO_TP6;
	CString aVAR__CFG_PIO_TD1;

	// VIS1 -----
	CString dVAR__CFG_VIS1_EXIST_FLAG;

	// BUFF1 ----
	CString dVAR__CFG_BUFF1_EXIST_FLAG;

	// BUFF2 ----
	CString dVAR__CFG_BUFF2_EXIST_FLAG;

	// FULL BUFF ----
	CString dVAR__CFG_FULL_BUFF_EXIST_FLAG;

	// ---- OCR -----
	CString dVAR__CFG_OCR_ENABLED;
	CString aVAR__CFG_OCR_ANGLE_ROTATE_BACK;
	CString dVAR__CFG_OCR_DEBUG_MODE;
	CString aVAR__CFG_OCR_ERROR_BYPASS;
	CString aVAR__CFG_OCR_NUM_RETRY_SEMI_M14;
	CString aVAR__CFG_OCR_NUM_RETRY_SEMI_M17;
	CString aVAR__CFG_OCR_RPLACE_CENTER_ALIGN;
	CString aVAR__CFG_OCR_SCORE_LIMIT_SEMI_M14;
	CString aVAR__CFG_OCR_SELECT_READ_OPT_TYPE;
	CString dVAR__CFG_OCR_VERIFY_CYCLE_TEST_ENABLED;
	CString aVAR__CFG_OCR_WAFER_ROTATE_ANGLE;

	// ---- METROLOGY -----
	CString sVAR__CFG_METROLOGY_DIRECTORY;
	CString sVAR__CFG_METROLOGY_OFFLINE_DRV;
	CString sVAR__CFG_METROLOGY_OFFLINE_PRESERV_DAYS;
	CString dVAR__CFG_METROLOGY_OFFLINE_TYPE;
	CString dVAR__CFG_USE_METROLOGY_ALIGN_ANGLE;
	CString dVAR__CFG_ATM_PRESS_MON;
	CString dVAR__CFG_ATM_CHECK_WHEN_PICK_FROM_APM;
	CString aVAR__CFG_TM_UPC1_SETPOINT;
	CString aVAR__CFG_TM_UPC2_SETPOINT;
	CString aVAR__CFG_TM_TRACE_DATALOG;
	CString aVAR__CFG_TM_LOGGING_EXPIRE_DAYS;
	CString dVAR__CFG_TM_DISABLE_COVER_SWITCH_CHECK;

	CString aVAR__CFG_TM_CONV3_FORELINE_CROSS_PRESS;
	CString aVAR__CFG_TM_CONV3_FORELINE_CROSS_STAB_TIME;
	CString aVAR__CFG_TM_CONV3_FORELINE_CROSS_TIMEOUT;
	CString aVAR__CFG_TM_CONV3_LOWER_TOLERANCE;
	CString aVAR__CFG_TM_CONV3_UPPER_TOLERANCE;

	CString aVAR__CFG_TM_CONV1_FORELINE_CROSS_PRESS;
	CString aVAR__CFG_TM_CONV1_FORELINE_CROSS_STAB_TIME;
	CString aVAR__CFG_TM_CONV1_FORELINE_CROSS_TIMEOUT;
	CString aVAR__CFG_TM_CONV1_LOWER_TOLERANCE;
	CString aVAR__CFG_TM_CONV1_UPPER_TOLERANCE;
	CString aVAR__CFG_TM_CONV1_ATM_HIGH_PRESS;
	CString aVAR__CFG_TM_CONV1_ATM_LOW_PRESS;
	CString dVAR__CFG_LL1_ARM_ASSIGNMENT;
	CString dVAR__CFG_LL2_ARM_ASSIGNMENT;
	CString dVAR__CFG_CTL_STS_OFFLINE_LIGHTS;
	CString aVAR__CFG_LL1_DA_EXTEND_R_HARD_TOL;
	CString aVAR__CFG_LL1_DA_EXTEND_R_SOFT_TOL;
	CString aVAR__CFG_LL1_DA_EXTEND_T_HARD_TOL;
	CString aVAR__CFG_LL1_DA_EXTEND_T_SOFT_TOL;
	CString aVAR__CFG_LL2_DA_EXTEND_R_HARD_TOL;
	CString aVAR__CFG_LL2_DA_EXTEND_R_SOFT_TOL;
	CString aVAR__CFG_LL2_DA_EXTEND_T_HARD_TOL;
	CString aVAR__CFG_LL2_DA_EXTEND_T_SOFT_TOL;
	CString dVAR__CFG_PM1_ARM_ASSIGNMENT;
	CString dVAR__CFG_PM2_ARM_ASSIGNMENT;
	CString dVAR__CFG_PM3_ARM_ASSIGNMENT;
	CString dVAR__CFG_PM4_ARM_ASSIGNMENT;
	CString dVAR__CFG_OHT1_CLAMP_TURN_OFF_HO;
	CString dVAR__CFG_OHT2_CLAMP_TURN_OFF_HO;
	CString dVAR__CFG_OHT3_CLAMP_TURN_OFF_HO;
	CString aVAR__CFG_OHT1_COMPT_ON_TIMEOUT_E23_T5;
	CString aVAR__CFG_OHT2_COMPT_ON_TIMEOUT_E23_T5;
	CString aVAR__CFG_OHT3_COMPT_ON_TIMEOUT_E23_T5;
	CString dVAR__CFG_OHT1_ENABLE_DEBUG;
	CString dVAR__CFG_OHT2_ENABLE_DEBUG;
	CString dVAR__CFG_OHT3_ENABLE_DEBUG;
	CString dVAR__CFG_OHT1_ENABLED_DISPLAY_ON_UI;
	CString dVAR__CFG_OHT2_ENABLED_DISPLAY_ON_UI;
	CString dVAR__CFG_OHT3_ENABLED_DISPLAY_ON_UI;
	CString dVAR__CFG_OHT1_ERR_RECOVERY_ONE_OPTION;
	CString dVAR__CFG_OHT2_ERR_RECOVERY_ONE_OPTION;
	CString dVAR__CFG_OHT3_ERR_RECOVERY_ONE_OPTION;
	CString dVAR__CFG_OHT1_ERR_RECOVERY_TYPE1;
	CString dVAR__CFG_OHT2_ERR_RECOVERY_TYPE1;
	CString dVAR__CFG_OHT3_ERR_RECOVERY_TYPE1;
	CString dVAR__CFG_OHT1_SELECT_E23_E84;
	CString dVAR__CFG_OHT2_SELECT_E23_E84;
	CString dVAR__CFG_OHT3_SELECT_E23_E84;
	CString aVAR__CFG_OHT1_SHORT_DELAY;
	CString aVAR__CFG_OHT2_SHORT_DELAY;
	CString aVAR__CFG_OHT3_SHORT_DELAY;
	CString dVAR__CFG_LP1_DISPLAY_READ_TAG_PAGE1and2ONLY;
	CString dVAR__CFG_LP2_DISPLAY_READ_TAG_PAGE1and2ONLY;
	CString dVAR__CFG_LP3_DISPLAY_READ_TAG_PAGE1and2ONLY;
	CString dVAR__CFG_LP1_ACC_MODE_VIOLATION_TO_POST_ERR_ALARM;
	CString dVAR__CFG_LP2_ACC_MODE_VIOLATION_TO_POST_ERR_ALARM;
	CString dVAR__CFG_LP3_ACC_MODE_VIOLATION_TO_POST_ERR_ALARM;
	CString dVAR__CFG_LP1_IS_DUAL_LIGHT_INSTALLED;
	CString dVAR__CFG_LP2_IS_DUAL_LIGHT_INSTALLED;
	CString dVAR__CFG_LP3_IS_DUAL_LIGHT_INSTALLED;
	CString dVAR__CFG_LP1_ENABLE_DEBUG;
	CString dVAR__CFG_LP2_ENABLE_DEBUG;
	CString dVAR__CFG_LP3_ENABLE_DEBUG;
	CString aVAR__CFG_LP1_WAFER_NUMBER;
	CString aVAR__CFG_LP2_WAFER_NUMBER;
	CString aVAR__CFG_LP3_WAFER_NUMBER;
	CString dVAR__CFG_LP1_PDO_LIGHT_BTN_DOCK_UNDOCK_OPT;
	CString dVAR__CFG_LP2_PDO_LIGHT_BTN_DOCK_UNDOCK_OPT;
	CString dVAR__CFG_LP3_PDO_LIGHT_BTN_DOCK_UNDOCK_OPT;
	CString dVAR__CFG_LP1_READ_8BYTES_FOR_TAG_READ;
	CString dVAR__CFG_LP2_READ_8BYTES_FOR_TAG_READ;
	CString dVAR__CFG_LP3_READ_8BYTES_FOR_TAG_READ;
	CString dVAR__CFG_LP1_TRIM_LEADING_TRAILING_SPACES;
	CString dVAR__CFG_LP2_TRIM_LEADING_TRAILING_SPACES;
	CString dVAR__CFG_LP3_TRIM_LEADING_TRAILING_SPACES;
	CString dVAR__CFG_LP1_TRIM_TRAILING_UNDER_SCORES;
	CString dVAR__CFG_LP2_TRIM_TRAILING_UNDER_SCORES;
	CString dVAR__CFG_LP3_TRIM_TRAILING_UNDER_SCORES;
	CString dVAR__CFG_LP1_TAG_ID1_ENABLED_DISPLAY_ON_UI;
	CString dVAR__CFG_LP2_TAG_ID1_ENABLED_DISPLAY_ON_UI;
	CString dVAR__CFG_LP3_TAG_ID1_ENABLED_DISPLAY_ON_UI;

	CString dVAR__CFG_ALLOW_INIT_APM_WHEN_INIT_ALL;
	CString dVAR__CFG_ALLOW_INIT_METROLOGY_WHEN_INIT_ALL;
	CString dVAR__CFG_ALLOW_LOAD_UNLOAD_ERR_TO_CONTINUE_OHT_OPERATION;

	// COOL Station -----
	CString dCFG_COOL_STATION_SLOT1_USE;
	CString dCFG_COOL_STATION_SLOT2_USE;
	CString dCFG_COOL_STATION_SLOT3_USE;
	CString dCFG_COOL_STATION_SLOT4_USE;
	CString aVAR__CFG_DEFAULT_PROCESS_TIME;	

	CString dVAR__CFG_LOCAL_DA_LL1;
	CString dVAR__CFG_LOCAL_DA_LL2;

	// PMC LINK TEST ...
	CX__VAR_STRING_CTRL  sCH__PMC_LINK_TEST_FLAG[CFG_PM_LIMIT];
	CX__VAR_DIGITAL_CTRL dCH__CFG_SIM_MODE;

	// ANI Channel ...
	CX__VAR_STRING_CTRL  sCH__ANI_PRESSURE_STATUS_ATM;
	//


	// ...
	void Mon__PM_LINK_TEST(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString _Get__LLx_NAME(const int ll_i)
	{
		if(ll_i == 0)		return "LBA";
		if(ll_i == 1)		return "LBB";
		if(ll_i == 2)		return "LBC";
		if(ll_i == 3)		return "LBD";

		return "LLx";
	}


public:
	CObj__DB_CFG();
	~CObj__DB_CFG();

	//-------------------------------------------------------------------------
	int __DEFINE__CONTROL_MODE(obj,l_mode);
	int __DEFINE__VERSION_HISTORY(version);

	int __DEFINE__VARIABLE_STD(p_variable);
	int __DEFINE__ALARM(p_alarm);

	//-------------------------------------------------------------------------
	int __INITIALIZE__OBJECT(p_variable,p_ext_obj_create);

	//-------------------------------------------------------------------------
	int __CALL__CONTROL_MODE(mode,p_debug,p_variable,p_alarm);
	int __CALL__MONITORING(id,p_variable,p_alarm);
};
